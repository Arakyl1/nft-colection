// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NFTCard {
  id Int @id @default(autoincrement())
  img String
  price Int
  top Boolean @default(false)
  news Boolean @default(true)
  currency String
  quantity Int @default(0)
  date DateTime @default(now())

  author User @relation(fields: [authorId], references: [id])
  authorId Int

  attributes Attributes[]
  colection Colection[]
  commit Comment[]
}

model Attributes {
  id Int @id @default(autoincrement())
  name String
  nftCardId NFTCard[]
  blogCard BlogCard[]
}

model BlogCard {
  id Int @id @default(autoincrement())
  title String
  text String
  img String
  ranting Int @default(0)
  date DateTime @default(now())
  
  author User @relation(fields: [authorId], references: [id])
  authorId Int

  attributes Attributes[]
}

model Colection {
  id Int @id @default(autoincrement())
  title String
  text String @default("")
  ranting Int @default(0)
  date DateTime @default(now())

  nFTCard NFTCard[]

  author User @relation(fields: [authorId], references: [id])
  authorId Int
}

model User {
  id Int @id @default(autoincrement())
  email   String  
  name    String?
  username String @unique
  password String
  profileImage String?
  createAt DateTime @default(now())

  quote String?
  ranting Int @default(0)
  
  blogcard BlogCard[]
  card NFTCard[]
  colection Colection[]
  commit Comment[]
  followedBy User[]  @relation("UserFollows")
  following  User[]  @relation("UserFollows")
  refrechToken RefrechToken[]
}

model Comment {
  id Int @id @default(autoincrement())
  ranting Int?
  text String?
  createAt DateTime @default(now())

  card NFTCard @relation(fields: [cardId], references: [id])
  cardId Int

  author User @relation(fields: [authorId], references: [id])
  authorId Int
}

model RefrechToken {
  id Int @id @default(autoincrement())
  token String @unique

  createAt DateTime @default(now())
  updateAta DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  userId Int
}
